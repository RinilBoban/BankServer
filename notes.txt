Server creation = node js + Express
-----------------------------------

1) Creation of the package.json - npm init
2) Creation of the node modules - npm i express (Installing of express)

Basic Steps
-----------
1) Creating a folder(BankServer)
2) Create package.json
3) Install express
4) Create index.js
5) Import express inside the index.js
6) Create an app using the express
7) Setup port number
8) Resolving http request
    Get     - to get the data
    Post    - to post the data
    Put     - update data partially
    Patch   - update data completely
    Delete  - delete data completely

9) HTTP Response Code
    1xx - Information
    2xx - Successful
    3xx - Redirection
    4xx - Client Error
    5xx - Server Error

10) JWT Token

    install command (Install JWT) : npm i jsonwebtoken
    To generate a token - sign()
11) Middleware

    It comes in the middle of the request and response cycle of the nodejs execution process        
    2 Types
        1) Application specific middleware : for enitire application
            req,res,next 

            ex: const appMiddleware = (req,res,next) => {
                console.log('Application specific middleware');
                next();
                }
                app.use(appMiddleware)


        2) Router specific middleware : validate token - verify() - jsonwebtoken

12) Database Integration
        1) Install mongoose - npm i mongoose
            mongoose is used to connect MongoDB with NodeJS

13) Asychronous function resolving - promise

        1) Resolve State - .then()
        2) Reject state - .catch()

14) CORS - Cross origin resource sharing

        install cors - npm i cors

        Used to exchange and communicate data between 2 ports
        port 4200 (angular)----------------request------------> 3000(node)

15) Asychronous Call - RxJs - (Reactive Extension for JavaScript)
        We use it in TypeScript only. It is actually a library
         In JavaScript, we use promise
         TS - RxJs(library)

         The method we use in Asychronous Call is :
         1) Observable 
                a) resolved - Subscribe()         (can resolve more request than promise)
                b) reject - catch()